// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// FALTA agregar foto en cancha,complejo,usuario,duenio --corte Dato String para que sea un url

generator client {
    provider = "prisma-client-js"
    output   = "../src/generated/prisma"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Usuario {
    id              Int      @id @default(autoincrement())
    apellido        String
    nombre          String
    dni             Int      @unique
    correo          String   @unique
    password        String
    fechaNacimiento DateTime @db.Date
    rol             Rol      @default(CLIENTE)


    resenias   Resenia[] //usuario
    alquileres Alquiler[] //usuario

    domicilioId Int?
    domicilio   Domicilio? @relation(fields: [domicilioId], references: [id])
}


model Owner {
    id              Int      @id @default(autoincrement())
    apellido        String
    nombre          String
    dni             Int      @unique
    cuit            Int      @unique
    correo          String   @unique
    password        String
    fechaNacimiento DateTime @db.Date
    rol             Rol      @default(DUENIO)


    complejos           Complejo[]  @relation(name: "PropietarioDeComplejo") //duenio
}

model Administrador {
    id       Int    @id @default(autoincrement())
    legajo   Int    @unique
    nombre   String
    apellido String
    correo   String @unique
    password String

    solicitudesEvaluadas Solicitud[]
}

model Solicitud {
    id     Int             @id @default(autoincrement())
    cuit Int @unique
    estado EstadoSolicitud @default(PENDIENTE)
    
    complejo Complejo?

    
    adminId  Int?
    admin    Administrador? @relation(fields: [adminId], references: [id])
}



model Complejo {
    id                   Int    @id @default(autoincrement())
    nombre              String
    descripcion         String?
    puntaje             Float?

    domicilioId Int       @unique
    domicilio   Domicilio @relation(fields: [domicilioId], references: [id], name: "ComplejoDomicilio")

    canchas Cancha[]

    propietarios Owner[] @relation(name: "PropietarioDeComplejo")

    solicitudId Int       @unique
    solicitud   Solicitud @relation(fields: [solicitudId], references: [id])
}

model Domicilio {
    id          Int       @id @default(autoincrement())
    calle       String
    altura      Int
    localidadId Int
    localidad   Localidad @relation(fields: [localidadId], references: [id])

    users    Usuario[]
    complejo Complejo? @relation(name: "ComplejoDomicilio")
}

model Localidad {
    id     Int    @id @default(autoincrement())
    nombre String

    domicilios Domicilio[]
}

model Cancha {
    id          Int    @id @default(autoincrement())
    nroCancha   Int    @unique
    descripcion String?
    puntaje     Float?
    deporteId   Int
    image String?


    horarios HorarioCronograma[]
    turnos   Turno[]
    resenias Resenia[]

    complejoId Int
    complejo   Complejo @relation(fields: [complejoId], references: [id])
    deporte    Deporte  @relation(fields: [deporteId], references: [id])
}

model HorarioCronograma {
    id        Int       @id @default(autoincrement())
    horaInicio   DateTime  @db.Time
    horaFin  DateTime  @db.Time

    canchaId Int
    cancha   Cancha @relation(fields: [canchaId], references: [id])
}

model Turno {
    id        Int      @id @default(autoincrement())
    fecha   DateTime @db.Date
    hora    DateTime @db.Time
    precio    Float

    reservado Boolean @default(false)


    alquilerId Int?
    alquiler   Alquiler? @relation(fields: [alquilerId], references: [id])

    canchaId Int
    cancha   Cancha @relation(fields: [canchaId], references: [id])
}

model Deporte {
    id     Int    @id @default(autoincrement())
    nombre String @unique

    canchas Cancha[]
}

model Resenia {
    id          Int    @id @default(autoincrement())
    descripcion String
    puntaje     Int

    canchaId  Int
    cancha    Cancha  @relation(fields: [canchaId], references: [id])
    usuarioId Int
    usuario   Usuario @relation(fields: [usuarioId], references: [id])
}

model Alquiler {
    id        Int            @id @default(autoincrement())
    createdAt DateTime       @default(now())
    estado    EstadoAlquiler @default(PROGRAMADO)

    pago   Pago?
    turnos Turno[]

    clienteId Int
    cliente   Usuario @relation(fields: [clienteId], references: [id])
}

model Pago {
    id                Int        @id @default(autoincrement())
    codigoTransaccion String
    metodoPago        MetodoPago
    monto             Float
    reembolso         Boolean
    fechaHora         DateTime   @default(now())

    alquilerId Int      @unique
    alquiler   Alquiler @relation(fields: [alquilerId], references: [id])
}

enum MetodoPago {
    DEBITO
    CREDITO
    TRANSFERENCIA
}

enum EstadoAlquiler {
    PROGRAMADO
    PAGADO
    CANCELADO
    FINALIZADO
}

enum DiaSemana {
    LUNES
    MARTES
    MIERCOLES
    JUEVES
    VIERNES
    SABADO
    DOMINGO
}

enum EstadoSolicitud {
    PENDIENTE
    APROBADA
    RECHAZADA
}

enum Rol {
    CLIENTE
    DUENIO
}
